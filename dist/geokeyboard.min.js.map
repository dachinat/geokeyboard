{"version":3,"sources":["webpack:///webpack/bootstrap e1b2e7bdbdb0ebbe05ba","webpack:///./src/main.js","webpack:///./src/geokeyboard.js","webpack:///./src/geokeyboard.select.js","webpack:///./src/geokeyboard.checkbox.js","webpack:///./src/geokeyboard.localstorage.js","webpack:///./src/insert-at-caret.js"],"names":[],"mappings":"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","file":"geokeyboard.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e1b2e7bdbdb0ebbe05ba","const Geokeyboard = require('./geokeyboard');\nconst Select = require('./geokeyboard.select.js');\nconst Checkbox = require('./geokeyboard.checkbox.js');\nconst LocalStorage = require('./geokeyboard.localstorage.js');\nconst insertAtCaret = require('./insert-at-caret');\n\nGeokeyboard.extensions = { Select, Checkbox, LocalStorage, insertAtCaret };\n\nwindow.Geokeyboard = Geokeyboard;\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","class Geokeyboard {\n    constructor(selectors, params={}, opts={}) {\n        this.selectors = [];\n        this.extensions = new Set;\n        this.lastFocus = null;\n\n        this.params = Object.assign({\n            hotSwitchKey: 96,\n            globalHotSwitch: null,\n            forceEnabled: false,\n            globals: []\n        }, params);\n\n        this.listen(selectors, opts);\n\n        if (this.params.forceEnabled) {\n            this._forceEnabled();\n        }\n\n        this._loadGlobalExtensions();\n    }\n\n    listen(selectors, opts={}, callback=null) {\n        this.constructor._warnBadSelector(selectors);\n\n        selectors = Array.from(document.querySelectorAll(selectors));\n\n        selectors.forEach(selector => {\n            selector = this.constructor.getContext(selector);\n\n            if (!selector[this.constructor.opts]) {\n                selector[this.constructor.opts] = {\n                    replaceOnType: true,\n                    hotSwitch: true,\n                    onChange: null,\n                    checkFocus: true,\n                    listeners: [],\n                };\n            }\n            selector[this.constructor.opts] = Object.assign(selector[this.constructor.opts], opts);\n\n            this.toggleListener(selector, 'replaceOnType', 'keypress', e => {\n                this.constructor._replaceTyped.call(this, e);\n            });\n\n            this.toggleListener(selector, 'replaceOnPaste', 'paste', e => {\n                this.constructor._replacePasted.call(this, e);\n            });\n\n            this.toggleListener(selector, 'hotSwitch', 'keypress', e => {\n                this.constructor._hotSwitch.call(this, e);\n            });\n\n            this.toggleListener(selector, 'checkFocus', 'focus', e => {\n                this.constructor._checkFocus.call(this, e);\n            }, true);\n        });\n\n        this.selectors = Array.from(new Set(this.selectors.concat(selectors)));\n\n        if (callback) {\n            callback.call(this, selectors);\n        }\n\n        this._loadGlobalExtensions();\n\n        return this;\n    }\n\n    attach(ext, params, opts={}) {\n        let inst;\n        for (let i of this.extensions) {\n            if (i instanceof ext) {\n                inst = i;\n                break;\n            }\n        }\n        if (!inst) {\n            inst = Reflect.construct(ext, [this, params, opts]);\n        } else {\n            inst.redefine(params, opts);\n        }\n        this.extensions.add(inst);\n\n        const l = inst.listeners();\n        if (!l) {\n            return;\n        }\n\n        l.forEach(el => {\n            let selector = document.querySelector(el[0]);\n\n            let extOpts = el[1].reduce((acc, c) => Object.assign(acc, {[c[0]]: true}), {listeners: []});\n\n            if (!selector[this.constructor.opts]) {\n                selector[this.constructor.opts] = extOpts;\n            } else {\n                selector[this.constructor.opts] = Object.assign(extOpts, selector[this.constructor.opts]);\n            }\n            selector[this.constructor.opts] = Object.assign(selector[this.constructor.opts], inst.opts);\n\n            el[1].forEach(l => {\n                this.toggleListener(selector, l[0], l[1], l[2]);\n            });\n\n            this.selectors = Array.from(new Set(this.selectors.concat([selector])));\n        });\n\n        return this;\n    }\n\n    toggleListener(selector, listener, type, fn, useCapture=false) {\n        const index = this.hasListener(selector, listener);\n\n        if (selector[this.constructor.opts][listener.split('-')[0]]) {\n            if (index === false) {\n                this.addListener(selector, listener, type, fn, useCapture)\n            }\n        } else {\n            if (index !== false) {\n                this.removeListener(selector, listener, type, useCapture);\n            }\n        }\n    }\n\n    addListener(selector, listener, type, fn) {\n        const hasListener = this.hasListener(selector, listener);\n        if (hasListener === false) {\n            selector[this.constructor.opts].listeners.push({[listener]: fn});\n        }\n        selector.addEventListener(type, this.getListener(selector, listener));\n    }\n\n    removeListener(selector, listener, type) {\n        selector.removeEventListener(type, this.getListener(selector, listener));\n        selector[this.constructor.opts].listeners.splice(this.hasListener(selector, listener), 1);\n    }\n\n    hasListener(selector, listener) {\n        const index = selector[this.constructor.opts].listeners.findIndex(f => typeof f[listener] === 'function');\n        return index === -1 ? false : index;\n    }\n\n\n    getListener(selector, listener) {\n        const l = selector[this.constructor.opts].listeners.find(f => f[listener]);\n        if (!l) {\n            //console.warn(`No such listener as '${listener}' for '${selector.outerHTML}'`);\n        }\n        return l ? l[listener] : undefined;\n    }\n\n    _enable(selector) {\n        selector = this.constructor.getContext(selector);\n        selector[this.constructor.opts].replaceOnType = true;\n\n        this.addListener(selector, 'replaceOnType', 'keypress', e => {\n            this.constructor._replaceTyped.call(this, e);\n        });\n\n        if (selector[this.constructor.opts]['onChange']) {\n            selector[this.constructor.opts]['onChange'].call(this, true);\n        }\n\n        for (let ext of this.extensions) {\n            if (typeof ext.enabled === 'function') {\n                ext.enabled.call(ext, selector);\n            }\n            if (ext.constructor.geokb) {\n                ext.constructor.globalEnabled.call(ext);\n            }\n        }\n    }\n\n    _disable(selector) {\n        selector = this.constructor.getContext(selector);\n        selector[this.constructor.opts].replaceOnType = false;\n\n        const listener = this.getListener(selector, 'replaceOnType');\n        if (!listener) {\n            return;\n        }\n\n        this.removeListener(selector, 'replaceOnType', 'keypress', listener);\n\n        if (selector[this.constructor.opts]['onChange']) {\n            selector[this.constructor.opts]['onChange'].call(this, false);\n        }\n\n        for (let ext of this.extensions) {\n            if (typeof ext.disabled === 'function') {\n                ext.disabled.call(ext, selector);\n            }\n            if (ext.constructor.geokb) {\n                ext.constructor.globalDisabled.call(ext);\n            }\n        }\n    }\n\n    _forceEnabled() {\n        this.selectors.forEach(s => this._enable(s));\n    }\n\n    static _replaceTyped(e) {\n        if (!new RegExp(this.constructor.characterSet.join('|')).test(e.key) || e.key.length > 1) {\n            return;\n        }\n        e.preventDefault();\n\n        this.constructor.extensions.insertAtCaret(e.currentTarget, String.fromCharCode(\n            this.constructor.characterSet.indexOf(e.key) + 4304)\n        );\n    }\n\n    static _replacePasted(e) {\n        let content = e.clipboardData ? e.clipboardData.getData('text/plain') : window.clipboardData ?\n            window.clipboardData.getData('Text') : null;\n\n        this.constructor.extensions.insertAtCaret(e.currentTarget, content.split('')\n            .map(c => {\n                let index = this.constructor.characterSet.indexOf(c);\n                return index !== -1 ? String.fromCharCode(index + 4304) : c;\n            })\n            .join(''));\n\n        e.preventDefault();\n    }\n\n    static _checkFocus(e) {\n        this.lastFocus = e.currentTarget;\n    }\n\n    _focus(among) {\n        if (this.lastFocus && among.includes(this.lastFocus.frameElement || this.lastFocus)) {\n            this.lastFocus.focus();\n        } else {\n            this.constructor.getContext(among[0]).focus();\n        }\n    }\n\n    static _hotSwitch(e) {\n        if (e.keyCode === this.params.hotSwitchKey || e.which === this.params.hotSwitchKey) {\n            this.constructor._toggle.call(this, e.currentTarget);\n            e.preventDefault();\n        }\n    }\n\n    static _toggle(selector) {\n        const index = this.hasListener(selector, 'replaceOnType');\n\n        if (index !== false) {\n            if (typeof this.params.globalHotSwitch === 'function') {\n                this.selectors.forEach(s => this._disable(s, s === selector));\n                this.params.globalHotSwitch.call(this, false);\n            } else {\n                this._disable(selector);\n            }\n        } else {\n            if (typeof this.params.globalHotSwitch === 'function') {\n                this.selectors.forEach(s => this._enable(s, s === selector));\n                this.params.globalHotSwitch.call(this, true);\n            } else {\n                this._enable(selector);\n            }\n        }\n    }\n\n    _loadGlobalExtensions() {\n        this.params.globals.forEach(ext => {\n            let found = false;\n            for (let instance of this.extensions) {\n                if (instance instanceof ext[0]) {\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                this.extensions.add(Reflect.construct(ext[0], [this]));\n            }\n            ext[0].build(this, ext[1]);\n        });\n    }\n\n    static _warnBadSelector(selectors) {\n        selectors.split(', ').forEach(selector => {\n            if (!document.querySelector(selector)) {\n                console\n                    .warn(`${this.constructor.name}: An element with identifier '${selector}' not found. (Skipping...)`);\n                return true;\n            }\n        });\n    }\n\n    static get characterSet() {\n        return 'abgdevzTiklmnopJrstufqRySCcZwWxjh'.split('');\n    }\n\n    static getContext(selector) {\n        return (selector.tagName === 'IFRAME') ?\n            (selector.contentWindow || selector.contentDocument).window : selector;\n    }\n\n    static get opts() {\n        return 'geokeyboard';//this.constructor.name;\n    }\n}\n\nmodule.exports = Geokeyboard;\n\n\n// WEBPACK FOOTER //\n// ./src/geokeyboard.js","class Select {\n    constructor(parent, selectors=null, opts={}) {\n        this.parent = parent;\n\n        if (selectors) {\n            this.selectors = selectors.split(', ');\n        }\n\n        this.opts = Object.assign({\n            select: null,\n            focusListenerOnSelect: true,\n            selectListener: true,\n            autoSwitch: true,\n        }, opts);\n    }\n\n    redefine(selectors, opts) {\n        this.opts = Object.assign(this.opts, opts);\n        if (this.selectors) {\n            this.selectors = Array.from(new Set(this.selectors.concat(selectors.split(', '))));\n        } else {\n            this.selectors = selectors.split(', ');\n        }\n    }\n\n    listeners() {\n        if (this.opts.select === null) {\n            return;\n        }\n\n        const schema = [];\n\n        this.selectors.forEach((s,i) => {\n            schema.push([s, [\n                ['focusListenerOnSelect-'+i, 'focus', e => this.updateSelectValue.call(this, e)]\n            ]]);\n        });\n\n        schema.push([this.opts.select, [\n            ['selectListener', 'change', e => this.changeHandler.call(this, e)]\n        ]]);\n\n        return schema;\n    }\n\n    enabled(selector) {\n        if (!this.selectors) {\n            return;\n        }\n\n        const selectors = Array.from(document.querySelectorAll(this.selectors.join(',')));\n        if (this.opts.autoSwitch && selectors.includes(selector)) {\n            document.querySelector(this.opts.select).value = 'true';\n        }\n    }\n\n    disabled(selector) {\n        if (!this.selectors) {\n            return;\n        }\n\n        const selectors = Array.from(document.querySelectorAll(this.selectors.join(',')));\n        if (this.opts.autoSwitch && selectors.includes(selector)) {\n            document.querySelector(this.opts.select).value = 'false';\n        }\n    }\n\n    changeHandler(e) {\n        this.selectors.forEach(s => {\n            const selector = document.querySelector(s);\n            const value = JSON.parse(e.currentTarget.value);\n\n            if (value === true) {\n                this.parent._enable.call(this.parent, selector);\n            } else {\n                this.parent._disable.call(this.parent, selector);\n            }\n        });\n\n\n        this.parent._focus(document.querySelector(this.selectors));\n    }\n\n    updateSelectValue(e) {\n        document.querySelector(this.opts.select).value = e.currentTarget[this.parent.constructor.opts].replaceOnType\n            .toString();\n    }\n\n    // For global usage\n    static build(geokb, params={}) {\n        Select.geokb = geokb;\n\n        if (!Select.params) {\n            Select.params = {\n                select: null,\n                focusListener: true,\n                autoSwitch: true\n            }\n        }\n        Select.params = Object.assign(Select.params, params);\n\n        const globalSelect = document.querySelector(Select.params.select);\n\n        globalSelect.addEventListener('change', (e) => {\n            geokb.selectors.forEach(s => e.currentTarget.value === 'true' ? geokb._enable(s) : geokb._disable(s));\n            geokb._focus(geokb.selectors);\n        });\n\n        geokb.selectors.forEach(s => {\n           s.addEventListener('focus', (e) => {\n               if (e.currentTarget[geokb.constructor.opts].replaceOnType) {\n                   document.querySelector(Select.params.select).value = 'true';\n               } else {\n                   document.querySelector(Select.params.select).value = 'false';\n               }\n           });\n        });\n\n        if (geokb.params.forceEnabled) {\n            Select.globalEnabled(true);\n        }\n    }\n\n    static globalEnabled(force) {\n        if (Select.params.autoSwitch || force) {\n            document.querySelector(Select.params.select).value = 'true';\n        }\n    }\n\n    static globalDisabled(force) {\n        if (Select.params.autoSwitch || force) {\n            document.querySelector(Select.params.select).value = 'false';\n        }\n    }\n}\n\nmodule.exports = Select;\n\n\n// WEBPACK FOOTER //\n// ./src/geokeyboard.select.js","class Checkbox {\n    constructor(parent, selectors=null, opts={}) {\n        this.parent = parent;\n\n        if (selectors) {\n            this.selectors = selectors.split(', ');\n        }\n\n        this.lastFocus = null;\n        this.opts = Object.assign({\n            checkbox: null,\n            focusListenerOnCheckbox: true,\n            checkboxListener: true,\n            autoSwitch: true,\n        }, opts);\n    }\n\n    changeHandler(e) {\n        this.selectors.forEach(s => {\n            const selector = document.querySelector(s);\n\n            if (e.currentTarget.checked === true) {\n                this.parent._enable.call(this.parent, selector);\n            } else {\n                this.parent._disable.call(this.parent, selector);\n            }\n        });\n\n        this.parent._focus(document.querySelector(this.selectors));\n    }\n\n    updateCheckbox(e) {\n        e.currentTarget.checked = e.currentTarget[this.parent.constructor.opts].replaceOnType;\n    }\n\n    // For local usage\n    redefine(selectors, opts) {\n        this.opts = Object.assign(this.opts, opts);\n        if (this.selectors) {\n            this.selectors = Array.from(new Set(this.selectors.concat(selectors.split(', '))));\n        } else {\n            this.selectors = selectors.split(', ');\n        }\n    }\n\n    listeners() {\n        if (this.opts.checkbox === null) {\n            return;\n        }\n\n        const schema = [];\n\n        this.selectors.forEach((s,i) => {\n            schema.push([s, [\n                ['focusListenerOnCheckbox-'+i, 'focus', e => this.updateCheckbox.call(this, e)]\n            ]]);\n        });\n\n        schema.push([this.opts.checkbox, [\n            ['checkboxListener', 'change', e => this.changeHandler.call(this, e)]\n        ]]);\n\n        return schema;\n    }\n\n    enabled(selector) {\n        if (!this.selectors) {\n            return;\n        }\n\n        const selectors = Array.from(document.querySelectorAll(this.selectors.join(',')));\n        if (this.opts.autoSwitch && selectors.includes(selector)) {\n            document.querySelector(this.opts.checkbox).checked = true;\n        }\n    }\n\n    disabled(selector) {\n        if (!this.selectors) {\n            return;\n        }\n\n        const selectors = Array.from(document.querySelectorAll(this.selectors.join(',')));\n        if (this.opts.autoSwitch && selectors.includes(selector)) {\n            document.querySelector(this.opts.checkbox).checked = false;\n        }\n    }\n\n    // For global usage\n    static build(geokb, params={}) {\n        Checkbox.geokb = geokb;\n\n        if (!Checkbox.params) {\n            Checkbox.params = {\n                checkbox: null,\n                focusListener: true,\n                autoSwitch: true\n            };\n        }\n        Checkbox.params = Object.assign(Checkbox.params, params);\n\n        const globalCheckbox = document.querySelector(Checkbox.params.checkbox);\n\n        globalCheckbox.addEventListener('change', (e) => {\n            geokb.selectors.forEach(s => e.currentTarget.checked ? geokb._enable(s) : geokb._disable(s));\n            geokb._focus(geokb.selectors);\n        });\n\n        geokb.selectors.forEach(s => {\n            s.addEventListener('focus', (e) => {\n                e.currentTarget.checked = e.target.replaceOnType;\n            });\n        });\n\n        if (geokb.params.forceEnabled) {\n            Checkbox.globalEnabled(true);\n        }\n    }\n\n    static globalEnabled(force) {\n        if (Checkbox.params.autoSwitch || force) {\n            document.querySelector(Checkbox.params.checkbox).checked = true;\n        }\n    }\n\n    static globalDisabled(force) {\n        if (Checkbox.params.autoSwitch || force) {\n            document.querySelector(Checkbox.params.checkbox).checked = false;\n        }\n    }\n}\n\nmodule.exports = Checkbox;\n\n\n// WEBPACK FOOTER //\n// ./src/geokeyboard.checkbox.js","class LocalStorage {\n    constructor(parent) {\n        this.parent = parent;\n    }\n    // For global usage\n    static build(geokb, params={}) {\n        LocalStorage.geokb = geokb;\n\n        LocalStorage.params = Object.assign({\n            key: 'geokeyboard',\n        }, params);\n\n        LocalStorage._load.call(LocalStorage);\n    }\n\n    static globalEnabled() {\n        console.log('enabled');\n        localStorage.setItem(this.constructor.params.key, true);\n    }\n\n    static globalDisabled() {\n        console.log('disabled!!!!');\n        localStorage.setItem(this.constructor.params.key, false);\n    }\n\n    static _load() {\n        if (this.geokb.params.forceEnabled) {\n            return;\n        }\n\n        const state = JSON.parse(localStorage.getItem(this.params.key));\n\n        if (state === null) {\n            return;\n        }\n\n        this.geokb.selectors.forEach(s => {\n            return state ? this.geokb._enable(s) : this.geokb._disable(s);\n        });\n    }\n}\n\nmodule.exports = LocalStorage;\n\n\n// WEBPACK FOOTER //\n// ./src/geokeyboard.localstorage.js","const insertAtCaret = (element, content) => {\n    const tagName = (element.tagName || element.frameElement.tagName);\n\n    if (tagName === 'DIV' || tagName === 'IFRAME') {\n        let sel, range;\n\n        let windowContext = window, documentContext = document;\n        if (tagName === 'IFRAME') {\n            windowContext = element.window;\n            documentContext = element.document;\n        }\n\n        if (windowContext.getSelection) {\n            sel = windowContext.getSelection();\n            if (sel.getRangeAt && sel.rangeCount) {\n                range = sel.getRangeAt(0);\n                range.deleteContents();\n\n                let el = documentContext.createElement('DIV');\n                el.innerHTML = content;\n                let frag = documentContext.createDocumentFragment(), node, lastNode;\n                while ((node = el.firstChild)) {\n                    lastNode = frag.appendChild(node);\n                }\n                range.insertNode(frag);\n\n                if (lastNode) {\n                    range = range.cloneRange();\n                    range.setStartAfter(lastNode);\n                    range.collapse(true);\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                }\n            }\n        } else if (documentContext.selection && documentContext.selection.type !== 'Control') {\n            documentContext.selection.createRange().pasteHTML(content);\n        }\n    } else if (tagName === 'INPUT' || tagName === 'TEXTAREA') {\n        if (typeof element.selectionStart === 'number' && typeof element.selectionEnd === 'number') {\n            const start = element.selectionStart;\n            element.value = element.value.slice(0, start) + content + element.value.slice(element.selectionEnd);\n            element.selectionStart = element.selectionEnd = start + 1;\n            element.blur();\n            element.focus();\n        } else {\n            const range = document.selection.createRange();\n            let normal = element.value.replace(/\\r\\n/g, '\\n');\n\n            let textInputRange = element.createTextRange();\n            textInputRange.moveToBookmark(range.getBookmark());\n\n            let endRange = element.createTextRange();\n            endRange.collapse(false);\n\n            let start, end;\n            if (textInputRange.compareEndPoints('StartToEnd', endRange) > -1) {\n                start = end = charLength;\n            } else {\n                start = -textInputRange.moveStart('character', -charLength);\n                start += normal.slice(0, start).split('\\n').length - 1;\n\n                if (textInputRange.compareEndPoints('EndToEnd', endRange) > -1) {\n                    end = charLength;\n                } else {\n                    end = -textInputRange.moveEnd('character', -charLength);\n                    end += normal.slice(0, end).split('\\n').length - 1;\n                }\n            }\n\n            element.value = element.value.slice(0, start) + content + element.value.slice(end);\n            //start++;\n\n            textInputRange = element.createTextRange();\n            textInputRange.collapse(true);\n        }\n    }\n};\n\nmodule.exports = insertAtCaret;\n\n\n// WEBPACK FOOTER //\n// ./src/insert-at-caret.js"],"sourceRoot":""}