{"version":3,"sources":["webpack:///webpack/bootstrap 129e99c620bad0a8f445","webpack:///./src/index.js","webpack:///./src/insert-at-caret.js"],"names":[],"mappings":"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","file":"geokeyboard.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 129e99c620bad0a8f445","const insertAtCaret = require(\"./insert-at-caret\");\n\nclass Geokeyboard {\n    constructor(selectors, params={}, opts={}) {\n        this.selectors = [];\n        this.lastFocus = null;\n\n        this.params = Object.assign({\n            hotSwitchKey: 96,\n            globalHotSwitch: null,\n            globalCheckbox: null,\n        }, params);\n\n        this.listen(selectors, opts);\n    }\n\n    listen(selectors, opts={}, callback=null) {\n        this.constructor._warnBadSelector(selectors);\n\n        selectors = Array.from(document.querySelectorAll(selectors));\n\n        selectors.forEach(selector => {\n            selector = this.constructor.getContext(selector);\n\n            if (!selector.opts) {\n                selector.opts = {\n                    replaceOnType: true,\n                    hotSwitch: true,\n                    onChange: null,\n                    checkbox: null,\n                    checkFocus: true,\n                    listeners: [],\n                };\n            }\n            selector.opts = Object.assign(selector.opts, opts);\n\n            this.toggleListener(selector, 'replaceOnType', 'keypress', e => {\n               this.constructor._replaceTyped.call(this, e);\n            });\n\n            this.toggleListener(selector, 'replaceOnPaste', 'paste', e => {\n                this.constructor._replacePasted.call(this, e);\n            });\n\n            this.toggleListener(selector, 'hotSwitch', 'keypress', e => {\n                this.constructor._hotSwitch.call(this, e);\n            });\n\n            this.toggleListener(selector, 'checkFocus', 'focus', e => {\n               this.constructor._checkFocus.call(this, e);\n            }, true);\n\n            if (this.params.globalCheckbox) {\n                const globalCheckbox = document.querySelector(this.params.globalCheckbox);\n\n                if (!globalCheckbox.opts) {\n                    globalCheckbox.opts = { watchCheckbox: true, listeners: [], };\n                }\n\n                this.toggleListener(globalCheckbox, 'watchCheckbox', 'change', e => {\n                    this.constructor._watchCheckbox.call(this, e);\n                });\n            }\n\n            if (selector.opts.checkbox) {\n                const checkbox = document.querySelector(selector.opts.checkbox);\n\n                if (!checkbox.opts) {\n                    checkbox.opts = { watchCheckbox: true, listeners: [], };\n                }\n\n                this.toggleListener(checkbox, 'watchCheckbox', 'change', e => {\n                    this.constructor._watchCheckbox.call(this, e);\n                });\n            }\n        });\n\n        this.selectors = Array.from(new Set(this.selectors.concat(selectors)));\n\n        if (callback) {\n            callback.call(this, selectors);\n        }\n\n        return this;\n    }\n\n\n    toggleListener(selector, listener, type, fn, useCapture=false) {\n        const index = this.hasListener(selector, listener);\n\n        if (selector.opts[listener]) {\n            if (index === false) {\n                this.addListener(selector, listener, type, fn, useCapture)\n            }\n        } else {\n            if (index !== false) {\n                this.removeListener(selector, listener, type, useCapture);\n            }\n        }\n    }\n\n    addListener(selector, listener, type, fn) {\n        selector.opts.listeners.push({[listener]: fn});\n        selector.addEventListener(type, this.getListener(selector, listener));\n    }\n\n    removeListener(selector, listener, type) {\n        selector.removeEventListener(type, this.getListener(selector, listener));\n        selector.opts.listeners.splice(this.hasListener(selector, listener), 1);\n    }\n\n    hasListener(selector, listener) {\n        const index = selector.opts.listeners.findIndex(f => typeof f[listener] === 'function');\n        return index === -1 ? false : index;\n    }\n\n    getListener(selector, listener) {\n        try {\n            return selector.opts.listeners.find(f => f[listener])[listener];\n        } catch (e) {\n            console.warn(`There is no such listener as '${listener}' for '${selector.outerHTML}'...`);\n        }\n    }\n\n    _enable(selector, enableCheckbox=true) {\n        selector = this.constructor.getContext(selector);\n        selector.opts.replaceOnType = true;\n\n        this.addListener(selector, 'replaceOnType', 'keypress', e => {\n            this.constructor._replaceTyped.call(this, e);\n        });\n\n        if (selector.opts['onChange']) {\n            selector.opts['onChange'].call(this, true);\n        }\n\n        if (selector.opts.checkbox && enableCheckbox) {\n            document.querySelector(selector.opts.checkbox).checked = true;\n        }\n\n        if (this.params.globalCheckbox) {\n            document.querySelector(this.params.globalCheckbox).checked = true;\n        }\n    }\n\n    _disable(selector, disableCheckbox=true) {\n        selector = this.constructor.getContext(selector);\n        selector.opts.replaceOnType = false;\n\n        this.removeListener(selector, 'replaceOnType', 'keypress', this.getListener(selector, 'replaceOnType'));\n\n        if (selector.opts['onChange']) {\n            selector.opts['onChange'].call(this, false);\n        }\n\n        if (selector.opts.checkbox && disableCheckbox) {\n            document.querySelector(selector.opts.checkbox).checked = false;\n        }\n\n        if (this.params.globalCheckbox) {//?\n            document.querySelector(this.params.globalCheckbox).checked = false;\n        }\n    }\n\n    static _replaceTyped(e) {\n        if (!new RegExp(this.constructor.characterSet.join('|')).test(e.key) || e.key.length > 1) {\n            //|| !this.o.active) {\n            //|| !e.currentTarget.opts.active) {\n            return;\n        }\n        console.log('return');\n        e.preventDefault();\n\n        insertAtCaret(e.currentTarget, String.fromCharCode(this.constructor.characterSet.indexOf(e.key) + 4304));\n    }\n\n    static _replacePasted(e) {\n        let content = e.clipboardData ? e.clipboardData.getData('text/plain') : window.clipboardData ?\n            window.clipboardData.getData('Text') : null;\n\n        insertAtCaret(e.currentTarget, content.split('')\n            .map(c => {\n                let index = this.constructor.characterSet.indexOf(c);\n                return index !== -1 ? String.fromCharCode(index + 4304) : c;\n            })\n            .join(''));\n\n        e.preventDefault();\n    }\n\n    static _checkFocus(e) {\n        if (e.currentTarget.opts.checkbox) {\n            document.querySelector(e.currentTarget.opts.checkbox).checked = e.currentTarget.opts.replaceOnType;\n        }\n\n        if (this.params.globalCheckbox) {\n            document.querySelector(this.params.globalCheckbox).checked = e.currentTarget.opts.replaceOnType;\n        }\n\n        this.lastFocus = e.currentTarget;\n    }\n\n    static _watchCheckbox(e) {\n        let selectors = document.querySelector(this.params.globalCheckbox) === e.currentTarget ? this.selectors :\n            this.selectors.filter(selector => {\n                selector = this.constructor.getContext(selector);\n                return (document.querySelector(selector.opts.checkbox) === e.currentTarget);\n            });\n\n        selectors.forEach(s => {\n            e.currentTarget.checked ? this._enable(s) : this._disable(s);\n        });\n\n\n        if (this.lastFocus && selectors.includes(this.lastFocus.frameElement || this.lastFocus)) {\n            this.lastFocus.focus();\n        } else {\n           this.constructor.getContext(selectors[0]).focus();\n        }\n    }\n\n    static _hotSwitch(e) {\n        if (e.keyCode === this.params.hotSwitchKey || e.which === this.params.hotSwitchKey) {\n            this.constructor._toggle.call(this, e.currentTarget);\n            e.preventDefault();\n        }\n    }\n\n    static _toggle(selector) {\n        const index = this.hasListener(selector, 'replaceOnType');\n\n        if (index !== false) {\n            if (typeof this.params.globalHotSwitch === 'function') {\n               this.selectors.forEach(s => this._disable(s, s === selector));\n               this.params.globalHotSwitch.call(this, false);\n            } else {\n                this._disable(selector);\n            }\n        } else {\n            if (typeof this.params.globalHotSwitch === 'function') {\n               this.selectors.forEach(s => this._enable(s, s === selector));\n                this.params.globalHotSwitch.call(this, true);\n            } else {\n                this._enable(selector);\n            }\n        }\n    }\n\n    static _warnBadSelector(selectors) {\n        selectors.split(', ').forEach(selector => {\n            if (!document.querySelector(selector)) {\n                console\n                    .warn(`${this.constructor.name}: An element with identifier '${selector}' not found. (Skipping...)`);\n                return true;\n            }\n        });\n    }\n\n    static get characterSet() {\n        return 'abgdevzTiklmnopJrstufqRySCcZwWxjh'.split('');\n    }\n\n    static getContext(selector) {\n        return (selector.tagName.toLowerCase() === 'iframe') ?\n            (selector.contentWindow || selector.contentDocument).window : selector;\n    }\n\n    // Not implemented\n    static get propertyName() {\n        return this.constructor.name;\n    }\n}\n\nwindow.Geokeyboard = Geokeyboard;\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","const insertAtCaret = (element, content) => {\n\n    const tagName = (element.tagName || element.frameElement.tagName).toLowerCase();\n\n    if (tagName === 'div' || tagName === 'iframe') {\n        let sel, range;\n\n        let windowContext = window, documentContext = document;\n        if (tagName === 'iframe') {\n            windowContext = element.window;\n            documentContext = element.document;\n        }\n\n        if (windowContext.getSelection) {\n            sel = windowContext.getSelection();\n            if (sel.getRangeAt && sel.rangeCount) {\n                range = sel.getRangeAt(0);\n                range.deleteContents();\n\n                let el = documentContext.createElement('div');\n                el.innerHTML = content;\n                let frag = documentContext.createDocumentFragment(), node, lastNode;\n                while ((node = el.firstChild)) {\n                    lastNode = frag.appendChild(node);\n                }\n                range.insertNode(frag);\n\n                if (lastNode) {\n                    range = range.cloneRange();\n                    range.setStartAfter(lastNode);\n                    range.collapse(true);\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n                }\n            }\n        } else if (documentContext.selection && documentContext.selection.type !== 'Control') {\n            documentContext.selection.createRange().pasteHTML(content);\n        }\n    } else if (tagName === 'input' || tagName === 'textarea') {\n        if (typeof element.selectionStart === 'number' && typeof element.selectionEnd === 'number') {\n            const start = element.selectionStart;\n            element.value = element.value.slice(0, start) + content + element.value.slice(element.selectionEnd);\n            element.selectionStart = element.selectionEnd = start + 1;\n        } else {\n            const range = document.selection.createRange();\n            let normal = element.value.replace(/\\r\\n/g, '\\n');\n\n            let textInputRange = element.createTextRange();\n            textInputRange.moveToBookmark(range.getBookmark());\n\n            let endRange = element.createTextRange();\n            endRange.collapse(false);\n\n            let start, end;\n            if (textInputRange.compareEndPoints('StartToEnd', endRange) > -1) {\n                start = end = charLength;\n            } else {\n                start = -textInputRange.moveStart('character', -charLength);\n                start += normal.slice(0, start).split('\\n').length - 1;\n\n                if (textInputRange.compareEndPoints('EndToEnd', endRange) > -1) {\n                    end = charLength;\n                } else {\n                    end = -textInputRange.moveEnd('character', -charLength);\n                    end += normal.slice(0, end).split('\\n').length - 1;\n                }\n            }\n\n            element.value = element.value.slice(0, start) + content + element.value.slice(end);\n            //start++;\n\n            textInputRange = element.createTextRange();\n            textInputRange.collapse(true);\n        }\n    }\n};\n\nmodule.exports = insertAtCaret;\n\n\n// WEBPACK FOOTER //\n// ./src/insert-at-caret.js"],"sourceRoot":""}